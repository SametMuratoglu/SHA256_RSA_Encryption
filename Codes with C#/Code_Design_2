using System;
using System.Drawing;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace SHA256_RSA
{
    public partial class Form2 : Form
    {
        string _privateKeyXml = "<RSAKeyValue><Modulus>skWe6qhpFGOE3lTe4fa0UyNqWiSmY/Is/7nJDkDzX4fCYJ6r0/uR1MnNYKwJRN2yAmqxqarkw3MuiqZ4QNmU8XDtTXiGZlLd0FyaXDx0vIWhu5yUp8BZNsR3ccfmziC81BvH9rmc85qEuAsQXOk8eV3LSFWsRnMR6XnNu11fn2E=</Modulus><Exponent>AQAB</Exponent><P>5bSELkSBG304QR+MmZBLJDGIZwISH2ucgRZY7BNNVKslmsY7XusnErOopZVxrx6ALs41hcpGzfojMg+82cyanw==</P><Q>xq3cUu9T63ENIlQhkqnmVL30VdyLvyhecZYvnFqeoZCqew6fd/vApMYG3WFSTtkzbwZwd4Wqb6B3jQS6daOF/w==</Q><DP>p1y9KhDTmLnFsP1RrdmKRhao8ZR6q9X2M7+ajncJ0vTX80sXmvLuhxvLdsnKCPPKJVAtgwt8RztHRYRd7rq6tQ==</DP><DQ>hab5uxTiuFTRyBEekKIYn1M1pfj6TXrjpbepiZ3wbrF57dRVdIp3+qB4h75rdz1n+z0ytUTG9dbV9ZiDspVxkw==</DQ><InverseQ>MykpN1QY+U7sSECgY9h+SShQNz2lsmr/PtDnh4qfUy/9lLTBF9gMLxaXGT+gZiTazsCP8x1nIW5jqVyMNR0SqA==</InverseQ><D>RLjx+iPR3jo/DjZJdXJVMXeFmBpoyj6hejN0fjorl7gOBpEkTCO+o/jnY0zuhc2wwZ2/v1hRt8a/OlPSJ6247HUn2RG+kqRjQ3+omZFIADJ0xCgZVNXj4puNTT1arFUWRybEAQv0gcCUkEVnGLwZVuIZgZvufCqQQ5lXshRtLsE=</D></RSAKeyValue>";
        
        private int x = 1;
        private Boolean y;

        public Form2()
        {
            InitializeComponent();

        }

        private void btn_select_Click(object sender, EventArgs e)
        {
            x = 1;
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Text Files|*.txt";

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string filePath = openFileDialog.FileName;

                if (File.Exists(filePath))
                {
                    string fileContent = File.ReadAllText(filePath);

                    string result = ExtractTextBetweenDelimiters(fileContent, "//", "//");
                    string result2 = NoCommentLine(filePath);

                    // Son iki satırı silmek için
                    int lastLineIndex = result2.LastIndexOf(Environment.NewLine);
                    if (lastLineIndex >= 0)
                    {
                        result2 = result2.Remove(lastLineIndex);
                        lastLineIndex = result2.LastIndexOf(Environment.NewLine);
                        if (lastLineIndex >= 0)
                        {
                            result2 = result2.Remove(lastLineIndex);
                        }
                    }

                    txt_encrypted_file.Text = result;
                    _encrypted.Text = result;
                    txt_signatured_file.Text = result2;
                    _signed.Text = result2;
                }
                else
                {
                    MessageBox.Show("Dosya bulunamadı.");
                }
            }
        }

        public string ExtractTextBetweenDelimiters(string text, string startDelimiter, string endDelimiter)
        {
            int startIndex = text.IndexOf(startDelimiter);
            int endIndex = text.IndexOf(endDelimiter, startIndex + startDelimiter.Length);

            if (startIndex != -1 && endIndex != -1)
            {
                int extractedLength = endIndex - (startIndex + startDelimiter.Length);
                string extractedText = text.Substring(startIndex + startDelimiter.Length, extractedLength);
                return extractedText;
            }

            return string.Empty;
        }

        public int _return(int _return)
        {
            return _return;
        }

        public string NoCommentLine(string filePath)
        {
            string[] lines = File.ReadAllLines(filePath);

            StringBuilder nonCommentLines = new StringBuilder();

            foreach (string line in lines)
            {
                if (!line.Trim().StartsWith("//"))
                {
                    nonCommentLines.AppendLine(line);

                    
                }              
            }

            string X = nonCommentLines.ToString();

            return X;
        }

        private void btn_Start_Click(object sender, EventArgs e)
            {
            if (x == 1)
            {
                if (txt_encrypted_file.Text != null && txt_signatured_file.Text != null)
                {
                    string encrypted = _encrypted.Text;
                    string signed = _signed.Text;


                    //-----------------DECRYPT----------------------// 
                    using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
                        {
                            if (!string.IsNullOrEmpty(txt_encrypted_file.Text))
                            {

                            try
                            {
                                rsa.FromXmlString(_privateKeyXml);
                                byte[] decryptedData = rsa.Decrypt(Convert.FromBase64String(encrypted), RSAEncryptionPadding.Pkcs1);
                                string decryptedText = Encoding.UTF8.GetString(decryptedData);
                                txt_encrypted_file.Text = decryptedText;

                            }

                            catch (CryptographicException)
                            {
                                Boolean y = false;
                            }

                        }
                            else
                            {
                                MessageBox.Show("Şifrelenmiş metin bulunmuyor.");
                            }
                        }
                    //-----------------DECRYPT----------------------//


                    //-----------------HASH----------------------//

                    string metin = signed;
                    using (SHA256 sha256 = SHA256.Create())
                    {
                        byte[] metinBytes = Encoding.UTF8.GetBytes(metin);
                        byte[] hashBytes = sha256.ComputeHash(metinBytes);

                        StringBuilder hashBuilder = new StringBuilder();
                        foreach (byte b in hashBytes)
                        {
                            hashBuilder.Append(b.ToString("x2"));
                        }
                        txt_signatured_file.Text = hashBuilder.ToString();

                    }
                    x = 0;
                }
                //-----------------HASH----------------------//

                if (txt_encrypted_file.Text != txt_signatured_file.Text)
                {
                    y = false;
                }
                else { y = true; }

            }

            else
                {
                    MessageBox.Show("Öncelikle bir dosya seçiniz !!!");
                }
           
            if (y)  //VALID OR INVALID
            {
                label_Valid.ForeColor = Color.Green;
                label_Valid.Text = "VALID";
            }
            else { label_Valid.ForeColor = Color.Red;
                label_Valid.Text = "INVALID";
                 }

            }
    }
}   
